#!/bin/bash

# Check if jq and curl are installed
if ! command -v jq &> /dev/null || ! command -v curl &> /dev/null
then
    echo "jq and curl must be installed. Please install them before running this script."
    exit 1
fi

# Variables
storageAccountName="azagentdeploy001"
storageContainerName="highartifacts"
allowed_vms_csv="AzureVirtualMachines.csv"
local_csv_path="/tmp/$allowed_vms_csv"
management_subscription="b56097b7-e22e-46fc-92b9-da53cb50cb23"  # Replace with subscription ID of storage account 
                                                                # remove subscription from script and use azure api's

# Switch to the correct subscription for the storage account
echo "Switching to subscription: $management_subscription"
az account set --subscription "$management_subscription"

# Update storage account network rules (allow access from all networks temporarily)
echo "Temporarily allowing access from all networks to the storage account"
az storage account update --name $storageAccountName --resource-group rg-inf-scripts-001 --default-action Allow

# Get the storage account key
echo "Retrieving storage account key for: $storageAccountName"
storageAccountKey=$(az storage account keys list --resource-group rg-inf-scripts-001 --account-name $storageAccountName --query "[0].value" --output tsv)

# Check if the storage account key was retrieved successfully
if [ -z "$storageAccountKey" ]; then
    echo "Failed to retrieve storage account key."
    exit 1
fi
echo "Storage account key retrieved successfully."

# Export the environment variables for storage account
export AZURE_STORAGE_ACCOUNT=$storageAccountName
export AZURE_STORAGE_KEY=$storageAccountKey

# Generate SAS token for the storage account
echo "Generating SAS token for storage account."
sas_token=$(az storage account generate-sas \
    --account-name "$storageAccountName" \
    --permissions rl \
    --resource-types sco \
    --services b \
    --expiry $(date -u -d '1 day' +%Y-%m-%dT%H:%MZ) \
    --output tsv)

# Check if the SAS token was generated successfully
if [ -z "$sas_token" ]; then
    echo "Failed to generate SAS token for the storage account."
    exit 1
fi
echo "SAS token generated successfully."

# Adjust the blob service endpoint for Azure Government Cloud
blob_service_endpoint="https://$storageAccountName.blob.core.usgovcloudapi.net"

# Download the allowed VMs CSV file from Azure Storage
csv_url="$blob_service_endpoint/$storageContainerName/$allowed_vms_csv?$sas_token"
echo "Downloading CSV from URL: $csv_url"

curl -o $local_csv_path "$csv_url"

# Check if the CSV file was downloaded successfully
if [ ! -f "$local_csv_path" ]; then
    echo "Failed to download the CSV file from Azure Storage."
    exit 1
fi

# Print out the content of the CSV file for debugging
echo "Content of downloaded CSV file:"
cat "$local_csv_path"

# Function to read allowed VMs from the CSV file
read_allowed_vms() {
    allowed_vms=()
    while IFS=, read -r name type subscription resourceGroup location status operatingSystem size publicIpAddress disks
    do
        # Skip the header row and strip any whitespace
        if [[ "$name" != "NAME" ]]; then
            if [[ "$name" == *"<Error>"* ]]; then
                echo "Error in CSV: $name"
                exit 1
            fi
            allowed_vms+=("$(echo "$name" | xargs),$(echo "$subscription" | xargs),$(echo "$resourceGroup" | xargs)")
        fi
    done < "$local_csv_path"
}

# Read the list of allowed VMs from the CSV file
read_allowed_vms

# Function to check if a VM is in the allowed list (case insensitive)
is_vm_allowed() {
    local vm_name=$1
    for allowed_vm in "${allowed_vms[@]}"; do
        IFS=',' read -r allowed_vm_name allowed_vm_subscription allowed_vm_resourceGroup <<< "$allowed_vm"
        if [[ "${vm_name,,}" == "${allowed_vm_name,,}" ]]; then
            echo "$allowed_vm_subscription,$allowed_vm_resourceGroup"
            return 0
        fi
    done
    echo ""
    return 1
}

# HX Agent filenames
hxAgentWindows="xagtSetup_35.31.28_universal.msi"
hxAgentUbuntu="xagt_36.21.0-1.ubuntu16_amd64.deb"
hxAgentRHEL="xagt-36.21.0-1.el7.x86_64.rpm"

# Function to install HX Agent on Windows VM
install_hx_agent_windows() {
    vmName=$1
    resourceGroup=$2

    # Create the InstallHXAgent.ps1 script content
    installScriptContent=$(cat <<EOT
powershell -Command "Invoke-WebRequest -Uri '$blob_service_endpoint/$storageContainerName/$hxAgentWindows?$sas_token' -OutFile 'C:\\Users\\hx\\$hxAgentWindows'; Start-Process msiexec.exe -ArgumentList '/i C:\\Users\\hx\\$hxAgentWindows /quiet /norestart' -Wait"
EOT
)

    # Escape JSON characters
    installScriptContent=$(echo "$installScriptContent" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

    # Use Custom Script Extension to execute the script
    az vm extension set \
        --resource-group "$resourceGroup" \
        --vm-name "$vmName" \
        --name CustomScriptExtension \
        --publisher Microsoft.Compute \
        --version 1.10 \
        --settings "{\"commandToExecute\": \"$installScriptContent\"}"
}

# Function to install hx Agent on Ubuntu VM
install_hx_agent_ubuntu() {
    vmName=$1
    resourceGroup=$2

    # Create the install script content
    installScriptContent=$(cat <<EOT
#!/bin/bash
wget -O /tmp/$hxAgentUbuntu '$blob_service_endpoint/$storageContainerName/$hxAgentUbuntu?$sas_token'
sudo dpkg -i /tmp/$hxAgentUbuntu
EOT
)

    # Escape JSON characters
    installScriptContent=$(echo "$installScriptContent" | sed 's/\\/\\\\/g' | sed 's/"/\\\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

    # Use Custom Script Extension to execute the script
    az vm extension set \
        --resource-group "$resourceGroup" \
        --vm-name "$vmName" \
        --name CustomScript \
        --publisher Microsoft.Azure.Extensions \
        --version 2.0 \
        --settings "{\"commandToExecute\": \"$installScriptContent\"}"
}

# Function to install hx Agent on RHEL VM
install_hx_agent_rhel() {
    vmName=$1
    resourceGroup=$2

    # Create the install script content
    installScriptContent=$(cat <<EOT
#!/bin/bash
sudo yum install -y wget
sudo yum install -y rpm
wget -O /tmp/$hxAgentRHEL "$blob_service_endpoint/$storageContainerName/$hxAgentRHEL?$sas_token"
sudo rpm -ivh /tmp/$hxAgentRHEL
EOT
)

    # Escape JSON characters
    installScriptContent=$(echo "$installScriptContent" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

    # Use Custom Script Extension to execute the script
    az vm extension set \
        --resource-group "$resourceGroup" \
        --vm-name "$vmName" \
        --name CustomScript \
        --publisher Microsoft.Azure.Extensions \
        --version 2.0 \
        --settings "{\"commandToExecute\": \"$installScriptContent\"}"
}

# Function to check if VM is running
is_vm_running() {
    local vm_name=$1
    local resource_group=$2
    vm_status=$(az vm get-instance-view --name "$vm_name" --resource-group "$resource_group" --query "instanceView.statuses[?code=='PowerState/running'] | [0]" -o tsv)
    if [[ -n "$vm_status" ]]; then
        return 0
    else
        return 1
    fi
}

# Get list of all subscriptions
subscriptions=$(az account list --query "[?state=='Enabled'].id" -o tsv)

# Loop through each subscription
for subscription in $subscriptions; do
    az account set --subscription "$subscription"

    # Get list of all VMs in the subscription
    vms=$(az vm list --query "[].{name:name, resourceGroup:resourceGroup, osType:storageProfile.osDisk.osType}" -o json)

    # Loop through the VMs and install hx Agent
    for vm in $(echo "$vms" | jq -c '.[]'); do
        vmName=$(echo "$vm" | jq -r '.name' | xargs)
        resourceGroup=$(echo "$vm" | jq -r '.resourceGroup' | xargs)
        osType=$(echo "$vm" | jq -r '.osType' | xargs)

        echo "Processing VM: $vmName, Resource Group: $resourceGroup, OS Type: $osType"

        # Check if VM is in the allowed list
        allowed_vm_info=$(is_vm_allowed "$vmName")
        if [ -n "$allowed_vm_info" ]; then
            allowed_vm_subscription=$(echo "$allowed_vm_info" | cut -d',' -f1)
            allowed_vm_resourceGroup=$(echo "$allowed_vm_info" | cut -d',' -f2)
            echo "VM $vmName is allowed, processing..."
            echo "Switching to subscription: $allowed_vm_subscription"
            az account set --subscription "$allowed_vm_subscription"

            echo "Checking if resource group $allowed_vm_resourceGroup exists in subscription $allowed_vm_subscription..."
            if az group exists --name "$allowed_vm_resourceGroup"; then
                echo "Resource group $allowed_vm_resourceGroup exists."

                if is_vm_running "$vmName" "$allowed_vm_resourceGroup"; then
                    if [ "$osType" == "Windows" ]; then
                        install_hx_agent_windows "$vmName" "$allowed_vm_resourceGroup"
                    elif [ "$osType" == "Linux" ]; then
                        # Check if Ubuntu or RHEL
                        osInfo=$(az vm run-command invoke -g "$allowed_vm_resourceGroup" -n "$vmName" \
                            --command-id RunShellScript \
                            --scripts "cat /etc/*release" \
                            --query "value[0].message" -o tsv | tr -d '\r')

                        if [[ "$osInfo" == *"Ubuntu"* ]]; then
                            install_hx_agent_ubuntu "$vmName" "$allowed_vm_resourceGroup"
                        elif [[ "$osInfo" == *"Red Hat"* ]] ||
                        [[ "$osInfo" == *"CentOS"* ]]; then
                            install_hx_agent_rhel "$vmName" "$allowed_vm_resourceGroup"
                        else
                            echo "Unsupported or unknown Linux distribution for VM: $vmName"
                        fi
                    fi
                else
                    echo "VM $vmName is not running. Skipping installation."
                fi
            else
                echo "Resource group $allowed_vm_resourceGroup does not exist in subscription $allowed_vm_subscription."
            fi
        else
            echo "VM $vmName is not in the allowed list, skipping..."
        fi
    done
done

# Reset storage account network rules to their previous state
echo "Resetting storage account network rules to previous state"
az storage account update --name $storageAccountName --resource-group rg-inf-scripts-001 --subscription $management_subscription --default-action Deny --bypass AzureServices

# Check if the resource group exists before adding the network rule
if az group exists --name rg-inf-scripts-001; then
    az storage account network-rule add --account-name $storageAccountName --resource-group rg-inf-scripts-001 --subscription $management_subscription --ip-address "136.226.38.121"
else
    echo "Resource group rg-inf-scripts-001 does not exist. Skipping network rule reset."
fi

1. install the agent software on your Linux endpoint
sudo rpm -ihv xagt-36.21.0-1.el7.x86_64.rpm

2. use the i option to import the agent configuration file from the /opt/fireeye/bin/xagt binary path
sudo /opt/fireeye/bin/xagt -i agent_config.json

3. Start the agent services on your Linux endpoint
sudo service xagt start
